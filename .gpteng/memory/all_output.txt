To create a command-line Tic Tac Toe game in Python, we will need several files to organize our code properly. Here's a list of the core classes and functions that we will implement:

- `main.py`: The entry point of the application. It will handle command-line arguments and start the game.
- `game.py`: Contains the `Game` class that manages the game state and logic.
- `board.py`: Contains the `Board` class that represents the Tic Tac Toe board and handles board-related operations.
- `player.py`: Contains the `Player` class that represents a player and their moves.
- `exceptions.py`: Contains custom exception classes for the game.
- `cli.py`: Contains functions for command-line interface interactions, such as printing the help screen and the board.
- `requirements.txt`: Lists the dependencies for the project.

Let's start by creating the entry point of the application, `main.py`, and then we will proceed to implement the other modules.

main.py
```python
import sys
from game import Game
from cli import print_help

def main():
    if "-h" in sys.argv:
        print_help()
    else:
        game = Game()
        game.start()

if __name__ == "__main__":
    main()
```

game.py
```python
from board import Board
from player import Player
from cli import print_board, print_winner, print_draw

class Game:
    def __init__(self):
        self.board = Board()
        self.players = [Player('X'), Player('O')]
        self.current_player_index = 0

    def start(self):
        while not self.board.is_full() and not self.board.has_winner():
            print_board(self.board)
            self.make_move()
            self.switch_player()

        print_board(self.board)
        if self.board.has_winner():
            print_winner(self.current_player())
        else:
            print_draw()

    def make_move(self):
        player = self.current_player()
        move_made = False
        while not move_made:
            try:
                move = player.get_move(self.board)
                self.board.make_move(move, player.symbol)
                move_made = True
            except ValueError as e:
                print(e)

    def switch_player(self):
        self.current_player_index = (self.current_player_index + 1) % len(self.players)

    def current_player(self):
        return self.players[self.current_player_index]
```

board.py
```python
class Board:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]

    def make_move(self, move, symbol):
        if self.is_valid_move(move):
            self.board[move[0]][move[1]] = symbol
        else:
            raise ValueError("Invalid move")

    def is_valid_move(self, move):
        row, col = move
        return 0 <= row < 3 and 0 <= col < 3 and self.board[row][col] == ' '

    def is_full(self):
        return all(all(cell != ' ' for cell in row) for row in self.board)

    def has_winner(self):
        # Check rows, columns, and diagonals for a winner
        lines = self.board + list(zip(*self.board)) + [self.diagonals()]
        return any(line.count(line[0]) == 3 and line[0] != ' ' for line in lines)

    def diagonals(self):
        return [self.board[i][i] for i in range(3)], [self.board[i][2 - i] for i in range(3)]
```

player.py
```python
class Player:
    def __init__(self, symbol):
        self.symbol = symbol

    def get_move(self, board):
        move = input(f"Player {self.symbol}, enter your move (row,col): ")
        return tuple(map(int, move.strip().split(',')))
```

cli.py
```python
def print_help():
    help_text = (
        "Tic Tac Toe Game\n"
        "Usage:\n"
        "  python main.py: Start a new game\n"
        "  python main.py -h: Show this help message\n"
        "\n"
        "During the game, enter your move as 'row,col' when prompted.\n"
        "Rows and columns are 0-indexed."
    )
    print(help_text)

def print_board(board):
    for row in board.board:
        print(' | '.join(row))
        print('-' * 5)

def print_winner(player):
    print(f"Player {player.symbol} wins!")

def print_draw():
    print("It's a draw!")
```

exceptions.py
```python
# Custom exceptions can be defined here if needed.
# Currently, we are using built-in exceptions.
```

requirements.txt
```
# This game does not have any external dependencies beyond the Python standard library.
```

This concludes the implementation of the command-line Tic Tac Toe game in Python. Each file contains the necessary code to run the game, and the `requirements.txt` file is present, although it is empty because we are only using the Python standard library. This concludes a fully working implementation.